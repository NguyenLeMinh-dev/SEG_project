from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.options import Options
import time
import re
import csv



def click_load_more_until_end(driver, timeout=5, max_tries=100):
    """
    T·ª± ƒë·ªông click n√∫t 'Xem th√™m' tr√™n trang danh s√°ch Foody ƒë·∫øn khi h·∫øt.
    - timeout: th·ªùi gian t·ªëi ƒëa ch·ªù m·ªói l·∫ßn (gi√¢y)
    - max_tries: gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
    """
    click_count = 0
    while click_count < max_tries:
        try:
            # T√¨m n√∫t 'Xem th√™m'
            button = WebDriverWait(driver, timeout).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "a.fd-btn-more"))
            )

            # Cu·ªôn ƒë·∫øn n√∫t
            driver.execute_script("arguments[0].scrollIntoView({behavior:'smooth', block:'center'});", button)
            time.sleep(0.5)

            # Click b·∫±ng JavaScript cho ch·∫Øc
            driver.execute_script("arguments[0].click();", button)
            click_count += 1
            print(f"üëâ Click 'Xem th√™m' l·∫ßn {click_count}")

            # ƒê·ª£i n·ªôi dung t·∫£i xong
            time.sleep(3)

        except Exception:
            print("‚úÖ ƒê√£ load h·∫øt t·∫•t c·∫£ qu√°n ƒÉn ‚Äî kh√¥ng c√≤n n√∫t 'Xem th√™m'.")
            break



# =============================
# H√ÄM L·∫§Y V√Ä CH·ªåN L·ªåC B√åNH LU·∫¨N
# =============================
def scrape_and_select_comments(driver):
    """
    C√†o t·∫•t c·∫£ b√¨nh lu·∫≠n, ph√¢n lo·∫°i ch√∫ng theo ƒëi·ªÉm s·ªë, v√† ch·ªçn ra m·ªôt b·ªô
    ƒë·∫°i di·ªán nh·∫•t (t·ªëi ƒëa 4-5 b√¨nh lu·∫≠n) ƒë·ªÉ l√†m gi√†u ng·ªØ c·∫£nh.
    """
    all_comments = []


    try:
        # B∆Ø·ªöC 1: T√åM CONTAINER L·ªöN (ƒê√É X√ÅC NH·∫¨N T·ª™ ·∫¢NH)
        # S·ª¨A L·ªñI: D√πng By.CLASS_NAME thay v√¨ By.ID
        review_list_container = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CLASS_NAME, "review-list")) 
        )
        
        # B∆Ø·ªöC 2: T√åM C√ÅC KH·ªêI B√åNH LU·∫¨N CON (ƒê√É X√ÅC NH·∫¨N T·ª™ ·∫¢NH)
        # Class "review-item" ƒë√£ ch√≠nh x√°c.
        comment_blocks = review_list_container.find_elements(By.CLASS_NAME, "review-item")

        print(f"    -> ƒê√£ t√¨m th·∫•y {len(comment_blocks)} kh·ªëi b√¨nh lu·∫≠n tr√™n trang.")

        for block in comment_blocks:
            try:
                comment_text = block.find_element(By.CSS_SELECTOR, "div.rd-des span.ng-binding").text.strip()
                rating_text = block.find_element(By.CSS_SELECTOR, "div.review-points span.ng-binding").text.strip()
                rating = float(rating_text)
                
                if comment_text:
                    all_comments.append({"rating": rating, "text": comment_text})
            except Exception:
                continue
                
    except Exception:
        print("    -> Kh√¥ng t√¨m th·∫•y container ch·ª©a b√¨nh lu·∫≠n ('review-list').")
        return ""

    # --- LOGIC L·ª∞A CH·ªåN TH√îNG MINH (Gi·ªØ nguy√™n) ---
    if not all_comments:
        return ""

    positive = sorted([c for c in all_comments if c['rating'] >= 7.0], key=lambda x: x['rating'], reverse=True)
    neutral = [c for c in all_comments if 5.0 <= c['rating'] < 7.0]
    negative = sorted([c for c in all_comments if c['rating'] < 5.0], key=lambda x: x['rating'])

    selected_comments = []
    selected_comments.extend(positive[:3])
    if negative:
        selected_comments.extend(negative[:1])
        
    if len(selected_comments) < 4 and neutral:
        selected_comments.extend(neutral[:(4 - len(selected_comments))])
    
    final_text = ". ".join([comment['text'] for comment in selected_comments])
    
    return final_text

# =============================
# 1Ô∏è‚É£  KH·ªûI T·∫†O WEBDRIVER
# =============================

edge_options = Options()
edge_options.add_argument("user-data-dir=/home/minh/Documents/selenium_profile")
# edge_options.add_argument("--start-maximized")
edge_options.add_argument("profile-directory=Default")
service = Service(r"/home/minh/Documents/Selenium/msedgedriver")
 
driver = webdriver.Edge(service=service, options =edge_options)


# =============================
# 2Ô∏è‚É£  L·∫§Y DANH S√ÅCH LINK QU√ÅN ƒÇN (Gi·ªØ nguy√™n)
# =============================
start_url = "https://www.foody.vn/can-tho"
driver.get(start_url)
time.sleep(3)

click_load_more_until_end(driver)

print("ƒêang cu·ªôn trang ƒë·ªÉ t·∫£i th√™m ƒë·ªãa ƒëi·ªÉm...")
for _ in range(3):
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    time.sleep(2)

elements = driver.find_elements(By.TAG_NAME, "a")
links = set()
for el in elements:
    href = el.get_attribute("href")
    if not href:
        continue
    href = href.strip()
    
    # C·∫¢I TI·∫æN LOGIC L·ªåC LINK
    if href.startswith(f"{start_url}/") and "/binh-luan" not in href and len(href.split('/')) == 5:
         # TH√äM ƒêI·ªÄU KI·ªÜN: Lo·∫°i b·ªè ch√≠nh x√°c link trang ch·ªß c√≥ d·∫°ng ".../can-tho/"
         if href != f"{start_url}/" and not any(x in href for x in ["/food/", "/su-kien", "/bo-suu-tap", "/bai-viet", "/video", "/khuyen-mai", "/coupon", "/o-dau", "/top-thanh-vien","/hinh-anh"]):
            links.add(href)

links = list(links)
print(f"\nT√¨m th·∫•y t·ªïng c·ªông: {len(links)} link qu√°n ƒÉn.")

# =============================
# 3Ô∏è‚É£  TRUY C·∫¨P T·ª™NG LINK V√Ä L·∫§Y D·ªÆ LI·ªÜU
# =============================
data = []
for i, url in enumerate(links, 1):  # TƒÉng l√™n 10 ƒë·ªÉ test ƒë∆∞·ª£c nhi·ªÅu tr∆∞·ªùng h·ª£p h∆°n
    print(f"\n[{i}/{len(links)}] ƒêang crawl: {url}")
    driver.get(url)
    time.sleep(3)

    # C·∫¢I TI·∫æN: B·ªçc t·ª´ng m·ª•c trong try-except ri√™ng ƒë·ªÉ kh√¥ng b·ªè l·ª° d·ªØ li·ªáu
    
    # T√™n qu√°n (b·∫Øt bu·ªôc ph·∫£i c√≥)
    try:
        name = driver.find_element(By.CSS_SELECTOR, "h1[itemprop='name']").text
    except Exception as e:
        print(f"    -> L·ªói: Kh√¥ng t√¨m th·∫•y t√™n qu√°n. B·ªè qua link n√†y. L·ªói: {e}")
        continue # N·∫øu kh√¥ng c√≥ t√™n, b·ªè qua lu√¥n

    # ƒê·ªãa ch·ªâ
    try:
        address_street = driver.find_element(By.CSS_SELECTOR, 'span[itemprop="streetAddress"]').text
        address_locality = driver.find_element(By.CSS_SELECTOR, 'span[itemprop="addressLocality"]').text
        address_region = driver.find_element(By.CSS_SELECTOR, 'span[itemprop="addressRegion"]').text
        address_full = f"{address_street}, {address_locality}, {address_region}"
    except:
        address_full = "" # N·∫øu l·ªói th√¨ g√°n gi√° tr·ªã r·ªóng

    # ƒêi·ªÉm ƒë√°nh gi√°
    try:
        rating = driver.find_element(By.CSS_SELECTOR, "div[itemprop='ratingValue']").text
    except:
        rating = ""

    # Gi·ªù m·ªü c·ª≠a
    try:
        hours_text = driver.find_element(By.CSS_SELECTOR, '.micro-timesopen span:nth-of-type(3)').get_attribute('innerText').strip()
    except:
        hours_text = ""

    # Gi√°
    try:
        price = driver.find_element(By.CSS_SELECTOR, 'span[itemprop="priceRange"]').get_attribute('innerText').strip()
    except:
        price = ""

    # GPS
    try:
        lat = driver.find_element(By.CSS_SELECTOR, 'meta[property="place:location:latitude"]').get_attribute("content")
        lon = driver.find_element(By.CSS_SELECTOR, 'meta[property="place:location:longitude"]').get_attribute("content")
        gps = f"{lat}, {lon}"
    except:
        gps = ""
        
    # Link ·∫£nh
    try:
        image_src = driver.find_element(By.CSS_SELECTOR, "div.main-image img").get_attribute("src")
    except:
        image_src = ""

    # B√¨nh lu·∫≠n (h√†m n√†y ƒë√£ t·ª± x·ª≠ l√Ω l·ªói)
    comments = scrape_and_select_comments(driver)
    
    # Th√™m d·ªØ li·ªáu v√†o danh s√°ch
    data.append({
        "name": name,
        "address": address_full,
        "rating": rating,
        "open_close": hours_text,
        "price": price,
        "gps": gps,
        "image_src": image_src,
        "comments": comments,
        "url": url
    })
    print(f"    -> L·∫•y d·ªØ li·ªáu th√†nh c√¥ng cho: {name}")

# =============================
# 4Ô∏è‚É£  L∆ØU K·∫æT QU·∫¢ RA FILE CSV (Gi·ªØ nguy√™n)
# =============================
if data:
    output_file = "foody_cantho.csv"
    with open(output_file, "w", newline="", encoding="utf-8-sig") as f:
        writer = csv.DictWriter(f, fieldnames=data[0].keys())
        writer.writeheader()
        writer.writerows(data)
    print(f"\n‚úÖ ƒê√£ l∆∞u {len(data)} d√≤ng d·ªØ li·ªáu v√†o file: {output_file}")
else:
    print("\n‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c c√†o, kh√¥ng t·∫°o file CSV.")

# =============================
driver.quit()
